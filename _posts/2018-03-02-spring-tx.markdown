---
layout:     post
title:      "spring系列 事务管理"
subtitle:   "spring系列 事务管理"
date:       2018-03-02 6:00:00
author:     "julyerr"
header-img: "img/web/spring/tx/tx.png"
header-mask: 0.5
catalog:    true
tags:
    - web
    - spring
    - txP
---

#### 事务

事务就是将一系列的动作当做一个单独的工作单元. 这些动作要么全部完成, 要么全部不执行。<br>

**事务的四个属性**<br>

- **原子性(atomicity)** 事务是一个原子操作, 由一系列动作组成. 事务的原子性确保动作要么全部完成要么完全不起作用.
- **一致性(consistency)** 一旦所有事务动作完成, 事务就被提交. 数据和资源就处于一种满足业务规则的一致性状态中.
- **隔离性(isolation)** 可能有许多事务会同时处理相同的数据, 因此每个事物都应该与其他事务隔离开来, 防止数据损坏.
- **持久性(durability)** 一旦事务完成, 无论发生什么系统错误, 它的结果都不应该受到影响. 通常情况下, 事务的结果被写到持久化存储器中.<br>

**并发操作事务可能出现的问题**<br>
![](/img/web/spring/tx/concurrent-problems.png)

- **丢失更新** 当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，会发生丢失更新问题;
- **脏读** 一个事务读到另一个事务未提交的更新数据;
- **不可重复读** 在同一个事务中,多次读取同一数据,返回的结果有所不同;
- **幻读** 一个事务读取到另一个事务已提交的insert数据.不可重复读和幻读的区别在于，前者注重的delete和update等行级锁，但是后者
则需要表锁，才能防止insert的操作。<br>

**事务的隔离界级别**

1. `ISOLATION_DEFAULT` 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.
2. `ISOLATION_READ_UNCOMMITTED` 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。
  这种隔离级别会产生脏读，不可重复读和幻像读。
3. `ISOLATION_READ_COMMITTED` 保证一个事务修改的数据提交后才能被另外一个事务读取,另外一个事务不能读取该事务未提交的数据
4. `ISOLATION_REPEATABLE_READ` 这种事务隔离级别可以防止脏读，不可重复读,但是可能出现幻像读。
5. `ISOLATION_SERIALIZABLE` 花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行,除了防止脏读，不可重复读外，还避免了幻像读。

---
### Spring中事务定义方式
spring 支持注解式和声明式两种方式配置事务管理<br>

**注解式**<br>
**三步骤**

- 配置事务管理器
- 配置注解驱动
- 在方法上加入@Transactional注解

```xml
<!-- 配置事务管理器 -->
<!--jdbc事务管理器是DataSourceTransactionManager -->
 <bean id="transactionManager" 
  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource"></property>
 </bean>
  
 <!-- 启用事务注解 -->
 //proxy-target-class：表示将使用的代码机制，默认false表示使用JDK代理，如果为true将使用CGLIB代理
 <tx:annotation-driven transaction-manager="transactionManager"/>
```


**@Transaction 支持的可选参数**<br>

- value 指定事务管理器名字，默认使用`<tx:annotation-driven/>`指定的事务管理器，用于支持多事务管理器环境；
- isolation 指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定；
- readOnly 指定事务是否只读，默认false表示事务非只读；
- timeout 指定事务超时时间，以秒为单位，默认-1表示事务超时将依赖于底层事务系统；
- rollbackFor 指定一组异常类，遇到该类异常将回滚事务；
- rollbackForClassname 指定一组异常类名字，其含义与<tx:method>中的rollback-for属性语义完全一样；
- noRollbackFor 指定一组异常类，即使遇到该类异常也将提交事务，即不回滚事务；
- noRollbackForClassname 指定一组异常类名字，其含义与<tx:method>中的no-rollback-for属性语义完全一样；
- propagation 指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定；
![](/img/web/spring/tx/progation-ways.png)	
上图详细全面总结了不同事务传播行为的特点，其中REQUIRES_NEW 和  NESTED	区别主要在于，Nested嵌套事务回滚或提交不会导致外部事务回滚或提交，但外部事务回滚将导致嵌套事务回滚，而 RequiresNew由于都是全新的事务，所以内外事务之间是无关联的。<br>

**required 和 required_new较为常用**
![](/img/web/spring/tx/required.jpg)
![](/img/web/spring/tx/required_new.jpg)

**notes**<br>

- 在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法>实现类>接口。
- 建议只在实现类或实现类的方法上使用@Transactional，而不要在接口上使用。接口上的@Transactional注解是“不能继承的”，基于CGLIB代理机制就会出现问题。

**声明式**<br>
不需要对原有的业务做任何修改，通过在XML文件中定义需要拦截方法的匹配即可完成配置
```xml
<!-- 1. 配置事务管理器 -->
 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource"></property>
 </bean>
  
 <!-- 2. 配置事务属性 -->
 <tx:advice id="txAdvice" transaction-manager="transactionManager">
  <tx:attributes>
   <!-- 根据方法名指定事务的属性 -->
   <tx:method name="purchase" propagation="REQUIRES_NEW"/>
   <tx:method name="get*" read-only="true"/>
   <tx:method name="find*" read-only="true"/>
   <tx:method name="*"/>
  </tx:attributes>
 </tx:advice>
  
 <!-- 3. 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
 <aop:config>
  <aop:pointcut expression="execution(* com.atguigu.spring.tx.xml.service.*.*(..))" 
   id="txPointCut"/>
  <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/> 
 </aop:config>
```


---
### 参考资料
- [Spring的事务管理](http://blog.51cto.com/s5650326/1718126)
- [spring 事务传播行为和事务隔离级别](http://blog.csdn.net/yujin753/article/details/42242297)
- [Spring的两种事务定义方式](http://blog.csdn.net/heyutao007/article/details/51746394)
- [spring事务原理3-事务的传播行为](http://sqtds.github.io/2014/06/09/2014/spring-tx3/)